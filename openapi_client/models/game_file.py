# coding: utf-8

"""
    ROM Store API

    API for querying, managing and accessing a TOSEC ROM store.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GameFile(BaseModel):
    """
    GameFile
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    demo: StrictBool
    system: Optional[StrictStr] = None
    video: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    dev_status: Optional[StrictStr] = None
    media: Optional[StrictStr] = None
    copyright: Optional[StrictStr] = None
    cracked: Optional[StrictBool] = False
    fixed: Optional[StrictBool] = False
    hacked: Optional[StrictBool] = False
    modified: Optional[StrictBool] = False
    pirated: Optional[StrictBool] = False
    trained: Optional[StrictBool] = False
    translated: Optional[StrictBool] = False
    overdumped: Optional[StrictBool] = False
    underdumped: Optional[StrictBool] = False
    virus: Optional[StrictBool] = False
    baddump: Optional[StrictBool] = False
    alternate: Optional[StrictBool] = False
    verified: Optional[StrictBool] = False
    platform_id: StrictInt
    game_id: StrictInt
    rom_count: StrictInt
    __properties: ClassVar[List[str]] = ["id", "name", "demo", "system", "video", "country", "language", "dev_status", "media", "copyright", "cracked", "fixed", "hacked", "modified", "pirated", "trained", "translated", "overdumped", "underdumped", "virus", "baddump", "alternate", "verified", "platform_id", "game_id", "rom_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if system (nullable) is None
        # and model_fields_set contains the field
        if self.system is None and "system" in self.model_fields_set:
            _dict['system'] = None

        # set to None if video (nullable) is None
        # and model_fields_set contains the field
        if self.video is None and "video" in self.model_fields_set:
            _dict['video'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if dev_status (nullable) is None
        # and model_fields_set contains the field
        if self.dev_status is None and "dev_status" in self.model_fields_set:
            _dict['dev_status'] = None

        # set to None if media (nullable) is None
        # and model_fields_set contains the field
        if self.media is None and "media" in self.model_fields_set:
            _dict['media'] = None

        # set to None if copyright (nullable) is None
        # and model_fields_set contains the field
        if self.copyright is None and "copyright" in self.model_fields_set:
            _dict['copyright'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "demo": obj.get("demo"),
            "system": obj.get("system"),
            "video": obj.get("video"),
            "country": obj.get("country"),
            "language": obj.get("language"),
            "dev_status": obj.get("dev_status"),
            "media": obj.get("media"),
            "copyright": obj.get("copyright"),
            "cracked": obj.get("cracked") if obj.get("cracked") is not None else False,
            "fixed": obj.get("fixed") if obj.get("fixed") is not None else False,
            "hacked": obj.get("hacked") if obj.get("hacked") is not None else False,
            "modified": obj.get("modified") if obj.get("modified") is not None else False,
            "pirated": obj.get("pirated") if obj.get("pirated") is not None else False,
            "trained": obj.get("trained") if obj.get("trained") is not None else False,
            "translated": obj.get("translated") if obj.get("translated") is not None else False,
            "overdumped": obj.get("overdumped") if obj.get("overdumped") is not None else False,
            "underdumped": obj.get("underdumped") if obj.get("underdumped") is not None else False,
            "virus": obj.get("virus") if obj.get("virus") is not None else False,
            "baddump": obj.get("baddump") if obj.get("baddump") is not None else False,
            "alternate": obj.get("alternate") if obj.get("alternate") is not None else False,
            "verified": obj.get("verified") if obj.get("verified") is not None else False,
            "platform_id": obj.get("platform_id"),
            "game_id": obj.get("game_id"),
            "rom_count": obj.get("rom_count")
        })
        return _obj


